# ============================================================================
# Heavy shell initialization - deferred for VSCode shell integration
# ============================================================================

# Đường dẫn cài đặt của oh-my-zsh.
export ZSH=$HOME/.oh-my-zsh

# VSCode Compatibility: Disable themes in VSCode to prevent prompt conflicts
if [[ "$TERM_PROGRAM" == "vscode" ]]; then
    # No theme in VSCode - let shell integration handle the prompt
    ZSH_THEME=""
else
    # Normal theme outside VSCode
    ZSH_THEME="robbyrussell"
fi

# Enhanced plugin setup for better functionality
plugins=(
    git
    brew
    macos
    docker
    kubectl
    z
    colored-man-pages
    command-not-found
    extract
    web-search
    copypath
    copyfile
)

# Nạp oh-my-zsh.
source $ZSH/oh-my-zsh.sh

# Simple prompt configuration
export PS1="%F{cyan}%n@%m %F{green}%1~ %# %f"

# Conditional loading of zsh plugins (only if installed)
[[ -f /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]] &&
    source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

[[ -f /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]] &&
    source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh

# Thiết lập ghcup (nếu cài đặt Haskell)
[ -f "/Users/thanhhaikhong/.ghcup/env" ] && . "/Users/thanhhaikhong/.ghcup/env"

# Tự động chuyển đến thư mục khi chỉ gõ tên.
setopt autocd

# Thiết lập màu sắc cho dòng lệnh được in ra
autoload -U colors && colors

# Tự động hoàn thành lệnh - use -C for faster loading
autoload -Uz compinit
if [[ -n ~/.zcompdump(#qN.mh+24) ]]; then
    compinit
else
    compinit -C
fi

# Các giá trị cần thêm vào PATH
PATH_VALUES=(
    "/opt/X11/bin"
)

# Cập nhật PATH
for value in "${PATH_VALUES[@]}"; do
    if [[ ! "$PATH" == *"$value"* ]]; then
        export PATH="$value:$PATH"
    fi
done

# Efficient PATH deduplication using zsh built-in functionality
typeset -U path PATH
export PATH

# Các giá trị cần thêm vào
LDFLAGS_VALUES=(
    "/opt/homebrew/Cellar/liblqr/0.4.3/lib"
    "/opt/homebrew/Cellar/jpeg/9f/lib"
    "/opt/homebrew/opt/openjdk/libexec/openjdk.jdk/Contents/Home/bin"
)

CPPFLAGS_VALUES=(
    "/opt/homebrew/Cellar/liblqr/0.4.3/include"
    "/opt/homebrew/Cellar/jpeg/9f/include"
)

PKG_CONFIG_PATH_VALUES=(
    "/opt/homebrew/Cellar/imagemagick/7.1.1-39/lib/pkgconfig"
    "/opt/homebrew/Cellar/liblqr/0.4.3/lib/pkgconfig"
    "/opt/homebrew/Cellar/jpeg/9f/lib/pkgconfig"
)

# Cập nhật LDFLAGS
for value in "${LDFLAGS_VALUES[@]}"; do
    if [[ ! "$LDFLAGS" == *"$value"* ]]; then
        export LDFLAGS="$LDFLAGS -L$value"
    fi
done

# Cập nhật CPPFLAGS
for value in "${CPPFLAGS_VALUES[@]}"; do
    if [[ ! "$CPPFLAGS" == *"$value"* ]]; then
        export CPPFLAGS="$CPPFLAGS -I$value"
    fi
done

# Cập nhật PKG_CONFIG_PATH
for value in "${PKG_CONFIG_PATH_VALUES[@]}"; do
    if [[ ! "$PKG_CONFIG_PATH" == *"$value"* ]]; then
        export PKG_CONFIG_PATH="$value:$PKG_CONFIG_PATH"
    fi
done

setopt extendedglob

# Initialize development tools
eval "$(pyenv init --path)"
eval "$(gh copilot alias -- zsh)"
eval $(thefuck --alias)

# ============================================================================
# ENVIRONMENT VARIABLES
# ============================================================================

# Load private environment variables (API keys, etc.)
[ -f "$HOME/.env" ] && source "$HOME/.env"

# System locale and language
export LANG=en_US.UTF-8

# Development tools paths
export PYENV_ROOT="$HOME/.pyenv"
export ANDROID_HOME="$HOME/Library/Android/sdk"
export ANDROID_SDK_ROOT="$ANDROID_HOME"

# Rust/Cargo environment
. "$HOME/.cargo/env"

# Homebrew environment setup (from .zprofile)
eval "$(/opt/homebrew/bin/brew shellenv)"

# Application paths - organized by category
export PATH="$PYENV_ROOT/bin:$PATH"                                             # Python version manager
export PATH="$HOME/.config/emacs/bin:$PATH"                                     # Emacs
export PATH="$HOME/.local/bin:$PATH"                                            # Local binaries
export PATH="/opt/homebrew/opt/ruby/bin:$PATH"                                  # Ruby
export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools:$PATH"  # Android SDK
export PATH="$PATH:/Users/thanhhaikhong/Library/Application Support/JetBrains/Toolbox/scripts"  # JetBrains Toolbox

# NVM lazy loading for faster shell startup
export NVM_DIR="$HOME/.nvm"

# Lazy load NVM (improves startup time by ~365ms)
nvm() {
    unfunction nvm
    unfunction load-nvmrc
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

    # Re-define load-nvmrc now that NVM functions are available
    load-nvmrc() {
        local node_version="$(nvm version)"
        local nvmrc_path="$(nvm_find_nvmrc)"

        if [ -n "$nvmrc_path" ]; then
            local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

            if [ "$nvmrc_node_version" = "N/A" ]; then
                nvm install
            elif [ "$nvmrc_node_version" != "$node_version" ]; then
                nvm use
            fi
        elif [ "$node_version" != "$(nvm version default)" ]; then
            echo "Reverting to nvm default version"
            nvm use default
        fi
    }

    nvm "$@"
}

# Placeholder load-nvmrc function before NVM is loaded
load-nvmrc() {
    # Check if .nvmrc exists in current directory
    if [ -f ".nvmrc" ]; then
        # Load NVM first, then use .nvmrc
        nvm use
    fi
}

# Auto-use .nvmrc if present in directory
autoload -U add-zsh-hook
add-zsh-hook chpwd load-nvmrc
load-nvmrc

# Initialize fzf shell integration
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
# Alternative if the above doesn't exist
if command -v fzf >/dev/null 2>&1; then
    source <(fzf --zsh)
fi

# ============================================================================
# USEFUL ALIASES
# ============================================================================

# File system navigation
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias ~='cd ~'

# Enhanced commands
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias cat='bat'
alias ls='eza --icons'
alias ll='eza -alF --icons'
alias la='eza -A --icons'
alias l='eza -CF --icons'
alias find='fd'

# Git aliases
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git pull'
alias gd='git diff'
alias gb='git branch'
alias gco='git checkout'
alias glog='git log --oneline --graph --decorate'

# Homebrew aliases
alias bi='brew install'
alias bs='brew search'
alias bu='brew update && brew upgrade'
alias bc='brew cleanup'

# System aliases
alias h='history'
alias j='jobs -l'
alias path='echo -e ${PATH//:/\\n}'
alias now='date +"%T"'
alias nowtime=now
alias nowdate='date +"%d-%m-%Y"'

# Safety aliases
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# Docker aliases (if using Docker)
alias d='docker'
alias dc='docker-compose'
alias dps='docker ps'
alias di='docker images'

# Quick edit configs
alias zshconfig='code ~/.zshrc_heavy'
alias ohmyzsh='code ~/.oh-my-zsh'